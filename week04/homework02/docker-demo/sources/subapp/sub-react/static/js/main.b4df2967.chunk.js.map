{"version":3,"sources":["../webpack/universalModuleDefinition","xindongfang.jpeg","public-path.js","App.js","serviceWorker.js","index.js"],"names":["root","factory","exports","module","define","amd","this","window","__POWERED_BY_QIANKUN__","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__","App","className","src","imgSrc","alt","Boolean","location","hostname","match","render","ReactDOM","document","getElementById","bootstrap","a","console","log","mount","props","unmount","unmountComponentAtNode","update","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,kBAAZC,SAA0C,kBAAXC,OACxCA,OAAOD,QAAUD,IACQ,oBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,kBAAZC,QACdA,QAAQ,kBAAoBD,IAE5BD,EAAK,kBAAoBC,IAR3B,CASGK,MAAM,WACT,O,mGCVAH,EAAOD,QAAU,IAA0B,0C,kDCAvCK,OAAOC,yBAEPC,IAA0BF,OAAOG,sC,2UCoBtBC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,8MACA,yBAAKC,IAAKC,IAAQC,IAAI,KACtB,+TAGA,4nBAGA,utBCHcC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCXN,SAASC,IACPC,IAASD,OACP,kBAAC,EAAD,MACAE,SAASC,eAAe,SAWrB,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,sDACLC,QAAQC,IAAI,yBADP,4C,sBAMA,SAAeC,EAAtB,kC,4CAAO,WAAqBC,GAArB,SAAAJ,EAAA,sDACLC,QAAQC,IAAIE,GACZT,IAFK,4C,sBAOA,SAAeU,IAAtB,+B,4CAAO,sBAAAL,EAAA,sDACLJ,IAASU,uBAAuBT,SAASC,eAAe,SADnD,4C,sBAMA,SAAeS,EAAtB,kC,4CAAO,WAAsBH,GAAtB,SAAAJ,EAAA,sDACLC,QAAQC,IAAI,eAAgBE,GADvB,4C,sBA1BFtB,OAAOC,wBACVY,IDoHI,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"static/js/main.b4df2967.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sub-react-main\"] = factory();\n\telse\n\t\troot[\"sub-react-main\"] = factory();\n})(this, function() {\nreturn ","module.exports = __webpack_public_path__ + \"static/media/xindongfang.9bf7b1df.jpeg\";","if (window.__POWERED_BY_QIANKUN__) {\n    // eslint-disable-next-line\n    __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n    //__webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n","import React from 'react';\nimport './App.css';\nimport imgSrc from \"./xindongfang.jpeg\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>新东方“自救”：旗下高端英语品牌学员转入机器人机构乐博乐博</h1>\n      <img src={imgSrc} alt=\"\" />\n      <p>\n        “双减”政策出台后，英语等学科类培训受到国家严格限制，新东方就旗下相关业务正在展开“自救”行动。\n      </p>\n      <p>\n        8月1日晚间，盛通股份（002599.SZ）发布公告称，其二级子公司北京乐博乐博教育咨询有限公司（下称乐博乐博）与北京市海淀区迈格森教育培训学校（下称迈格森）签署《转课合作协议》，双方就迈格森旗下学员转课等事宜展开合作。\n      </p>\n      <p>\n        迈格森是新东方教育科技集团与麦格劳希尔集团共同推出的青少年高端教育品牌，为3-18岁青少年提供个性化英语学习解决方案，提供幼儿英语、少儿英语、小学英语、小升初、初中英语、留学规划、家庭教育等课程，全国校区分布在北京、天津、成都、沈阳等地。\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './public-path'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction render() {\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n/**\n * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。\n * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。\n */\nexport async function bootstrap() {\n  console.log('react app bootstraped');\n}\n/**\n * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法\n */\nexport async function mount(props) {\n  console.log(props);\n  render();\n}\n/**\n * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例\n */\nexport async function unmount() {\n  ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n}\n/**\n * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效\n */\nexport async function update(props) {\n  console.log('update props', props);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}